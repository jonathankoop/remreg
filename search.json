[{"path":"http://jonathankoop.eu/remreg/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 remreg authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://jonathankoop.eu/remreg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonathan Koop. Maintainer.","code":""},{"path":"http://jonathankoop.eu/remreg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koop J (2025). remreg: Generate Relational Event History Data Evaluate Variable Selection Predictive Performance. R package version 0.2.0, http://jonathankoop.eu/remreg/.","code":"@Manual{,   title = {remreg: Generate Relational Event History Data And Evaluate Variable Selection And Predictive Performance},   author = {Jonathan Koop},   year = {2025},   note = {R package version 0.2.0},   url = {http://jonathankoop.eu/remreg/}, }"},{"path":[]},{"path":"http://jonathankoop.eu/remreg/index.html","id":"checking-regularized-estimation-of-relational-event-models","dir":"","previous_headings":"","what":"Checking Regularized Estimation of Relational Event Models","title":"Generate Relational Event History Data And Evaluate Variable Selection And Predictive Performance","text":"remreg package provides tools generate Relational Event History (REH) data based predefined effects estimate Relational Event Models (REM) using Maximum Likelihood estimation regularized estimation techniques. package designed facilitate evaluation performance regularized estimation techniques context REMs. package developed Jonathan Koop","code":""},{"path":"http://jonathankoop.eu/remreg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Relational Event History Data And Evaluate Variable Selection And Predictive Performance","text":"can install development version remreg GitHub : , load package:","code":"install.packages(\"devtools\") devtools::install_github(\"jonathankoop/remreg\") library(remreg)"},{"path":"http://jonathankoop.eu/remreg/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Generate Relational Event History Data And Evaluate Variable Selection And Predictive Performance","text":"remreg package designed follow simple workflow lined following steps: Set Covariates Parameters: Define covariates data.frame covariates parameters list parameters. Generate Data: Generate relational event history data based covariates parameters using generate_reh() function. Estimate Models: Estimate REM using Maximum Likelihood estimation regularized estimation techniques using estimate_rems() function. Select Variables: Select predictor variables based Maximum Likelihood estimation regularized estimation using select_variables() function. Evaluate Performance: Evaluate performance variable selection techniques using evaluate_selection() function.","code":""},{"path":"http://jonathankoop.eu/remreg/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Relational Event History Data And Evaluate Variable Selection And Predictive Performance","text":"following example demonstrates workflow remreg package. first define covariates parameters. , important mention effects, also zero effects, need defined parameters list. necessary ensure variables considered later estimation process. Next, generate relational event history data based covariates parameters. Following data generation, estimate REM using Maximum Likelihood estimation regularized estimation techniques. Important Note: ⚠️ case error message indicating singular matrix: Ensure include effects linear combinations others. Consider increasing number events make estimation stable. solution can found, please consider opening issue GitHub assistance. estimating models, can select variables based Maximum Likelihood estimation regularized estimation. , criteria defined select variables. Finally, evaluate performance variable selection techniques.","code":"# set seed for reproducibility set.seed(1)  # Find suitable effects for directed networks remstats::tie_effects(directed = TRUE)  # Define parameters parameters <- list(   baseline = -5,   inertia = 0.5,      difference_z1 = 0.5,       # Zero effects to be checked   difference_z2 = 0,   reciprocity = 0,   indegreeSender = 0 )  # Define covariates covar <- data.frame(   name = 1:10,   time = 0,   z1 = rnorm(100),   z2 = rnorm(100) ) events <- generate_reh(   parameters = parameters,   covar = covar,   M = 500, # Number of events    directed = TRUE # directed network ) results <- estimate_rems(edgelist = events,                          methods = c(\"mle\", \"abr_horseshoe\",                                       \"abr_ridge\", \"abr_lasso\")) selected <- select_variables(results,                              criterion_mle = \"p<0.05\",                              criterion_abr = \"95% hdi\") evaluation <- evaluate_selection(selected)"},{"path":"http://jonathankoop.eu/remreg/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Generate Relational Event History Data And Evaluate Variable Selection And Predictive Performance","text":"questions, suggestions, issues, please open issue GitHub contact via email.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/create_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Term for remstats Effects — create_term","title":"Create Term for remstats Effects — create_term","text":"Extracts variable prefixed string formats remstats effect term.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/create_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Term for remstats Effects — create_term","text":"","code":"create_term(name, prefix, template)"},{"path":"http://jonathankoop.eu/remreg/reference/create_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Term for remstats Effects — create_term","text":"name string process. prefix prefix indicating effect type. template template string, %s represents extracted variable.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/create_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Term for remstats Effects — create_term","text":"formatted string name matches prefix; otherwise, NULL.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/estimate_rems.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Relational Event Models (REMs) — estimate_rems","title":"Estimate Relational Event Models (REMs) — estimate_rems","text":"function estimates Relational Event Models (REMs) using Maximum Likelihood Estimation (MLE) Approximate Bayesian Regularization (ABR) various priors. processes relational event history (REH) generated generate_reh() computes tie-oriented statistics fit specified model.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/estimate_rems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Relational Event Models (REMs) — estimate_rems","text":"","code":"estimate_rems(   edgelist,   methods = c(\"mle\", \"abr_horseshoe\", \"abr_ridge\", \"abr_lasso\"),   seed = 123 )"},{"path":"http://jonathankoop.eu/remreg/reference/estimate_rems.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Relational Event Models (REMs) — estimate_rems","text":"edgelist list output generate_reh(), containing: edgelist: data frame simulated events columns time, actor1, actor2. parameters: named list model parameters. covar: data frame actor covariates. directed: Logical indicating whether network directed. methods character vector specifying estimation methods. Options include: \"mle\": Maximum Likelihood Estimation. \"abr_horseshoe\": ABR Horseshoe prior. \"abr_ridge\": ABR Ridge prior. \"abr_lasso\": ABR Lasso prior. Defaults methods. seed integer reproducibility random processes. Defaults 123.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/estimate_rems.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Relational Event Models (REMs) — estimate_rems","text":"list following elements: coefs_mle: Coefficients MLE model (computed). coefs_abr_horseshoe: ABR summary Horseshoe prior (computed). coefs_abr_ridge: ABR summary Ridge prior (computed). coefs_abr_lasso: ABR summary Lasso prior (computed). abr: Raw ABR results prior type used. parameters: Model parameters used estimation. covar: Actor covariates input REH. methods: Methods used estimation. directed: Indicates whether network directed. seed: Random seed used process.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/estimate_rems.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Relational Event Models (REMs) — estimate_rems","text":"estimate_rems() function performs following steps: Formula Generation: generates formula tie effects using generate_formula() based input parameters. Statistics Computation: Computes tie-oriented statistics using remstats::remstats() input REH. MLE Estimation: \"mle\" included methods, function estimates model using remstimate::remstimate() extracts coefficients covariance matrix processing. ABR Estimation: \"abr_horseshoe\", \"abr_ridge\", \"abr_lasso\" included methods, function performs Approximate Bayesian Regularization using shrinkem::shrinkem() specified priors. MLE Method: Estimates model parameters using maximum likelihood calculates covariance matrix. estimates serve priors ABR methods. ABR Method: Incorporates prior distributions shrink model parameters. Three priors supported: Horseshoe: Enforces sparsity model coefficients. Ridge: Applies global shrinkage coefficients. Lasso: Promotes sparsity interpretable results. Methods included methods skipped.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/estimate_rems.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate Relational Event Models (REMs) — estimate_rems","text":"function assumes input REH correctly formatted generated generate_reh(). Providing invalid inputs may result errors.","code":""},{"path":[]},{"path":"http://jonathankoop.eu/remreg/reference/estimate_rems.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Relational Event Models (REMs) — estimate_rems","text":"","code":"# Simulate a REH using generate_reh parameters <- list(   baseline = -5,   send_z1 = 0.5,   difference_z2 = 0.2,   inertia = 0.3 ) covar <- data.frame(   name = 1:10, time = 0,   z1 = rnorm(10),   z2 = rnorm(10) ) reh <- generate_reh(parameters, covar, M = 20, directed = TRUE) #> 1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20   # Estimate REMs results <- estimate_rems(reh, methods = c(\"mle\", \"abr_horseshoe\")) #> Relational Event Model (tie oriented)  #>  #> Call: #> ~1 + send(\"z1\", scaling = \"std\") + difference(\"z2\", scaling = \"std\") +     inertia(scaling = \"std\") #>  #>  #> Coefficients (MLE with interval likelihood): #>  #>                  Estimate    Std. Err     z value Pr(>|z|)    Pr(=0) #> baseline       -4.6776275   0.2446160 -19.1223322   0.0000 < 2.2e-16 #> send_z1         0.1824137   0.2436099   0.7487943   0.4540  0.771627 #> difference_z2   0.0095353   0.2452002   0.0388880   0.9690  0.817143 #> inertia         0.3576846   0.0969201   3.6905085   0.0002  0.004908 #> Null deviance: 221.6393 on 20 degrees of freedom #> Residual deviance: 212.5321 on 16 degrees of freedom #> Chi-square: 9.107194 on 4 degrees of freedom, asymptotic p-value 0.05847529  #> AIC: 220.5321 AICC: 223.1988 BIC: 224.515 #> MCMC burnin #> MCMC sampling #> Call: #> shrinkem.default(x = estimates, Sigma = cov, type = \"horseshoe\") #>  #>               input.est shrunk.mean shrunk.median shrunk.mode shrunk.lower #> baseline         -4.678      -4.627        -4.627      -4.613       -5.109 #> send_z1           0.182       0.113         0.113       0.005       -0.254 #> difference_z2     0.010       0.000         0.000       0.002       -0.401 #> inertia           0.358       0.335         0.335       0.332        0.139 #>               shrunk.upper nonzero #> baseline            -4.143       1 #> send_z1              0.560       0 #> difference_z2        0.406       0 #> inertia              0.526       1  # View results print(results$coefs_mle)                # MLE coefficients #>                   Estimate   Std. Err      z value     Pr(>|z|)       Pr(=0) #> baseline      -4.677627513 0.24461595 -19.12233222 0.0000000000 1.768787e-79 #> send_z1        0.182413674 0.24360986   0.74879429 0.4539812035 7.716268e-01 #> difference_z2  0.009535336 0.24520020   0.03888796 0.9689797132 8.171430e-01 #> inertia        0.357684607 0.09692014   3.69050852 0.0002238062 4.907552e-03 print(results$coefs_abr_horseshoe)      # ABR Horseshoe summary #>               input.est shrunk.mean shrunk.median shrunk.mode shrunk.lower #> baseline         -4.678      -4.627        -4.627      -4.613       -5.109 #> send_z1           0.182       0.113         0.113       0.005       -0.254 #> difference_z2     0.010       0.000         0.000       0.002       -0.401 #> inertia           0.358       0.335         0.335       0.332        0.139 #>               shrunk.upper nonzero #> baseline            -4.143       1 #> send_z1              0.560       0 #> difference_z2        0.406       0 #> inertia              0.526       1"},{"path":"http://jonathankoop.eu/remreg/reference/evaluate_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Variable Selection Performance — evaluate_selection","title":"Evaluate Variable Selection Performance — evaluate_selection","text":"function evaluates performance variable selection methods using output select_variables(). computes True Discovery Rate (TDR) False Discovery Rate (FDR) selection method based known non-zero zero parameters model.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/evaluate_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Variable Selection Performance — evaluate_selection","text":"","code":"evaluate_selection(selected)"},{"path":"http://jonathankoop.eu/remreg/reference/evaluate_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Variable Selection Performance — evaluate_selection","text":"selected list output select_variables(), containing: mle: Variables selected MLE method (applicable). abr_horseshoe: Variables selected ABR Horseshoe method (applicable). abr_ridge: Variables selected ABR Ridge method (applicable). abr_lasso: Variables selected ABR Lasso method (applicable). parameters: original model parameters, non-zero values indicate true effects. methods: methods used selection.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/evaluate_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Variable Selection Performance — evaluate_selection","text":"list containing: tdr: list True Discovery Rates (TDR) method. fdr: list False Discovery Rates (FDR) method.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/evaluate_selection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Variable Selection Performance — evaluate_selection","text":"evaluation performed comparing selected variables known non-zero zero parameters: True Discovery Rate (TDR): proportion correctly identified non-zero parameters. False Discovery Rate (FDR): proportion incorrectly identified zero parameters. method selected$methods, function calculates: TDR = (number correctly identified non-zero variables) / (total number non-zero variables) FDR = (number incorrectly identified zero variables) / (total number zero variables) results summarized printed user review.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/evaluate_selection.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Evaluate Variable Selection Performance — evaluate_selection","text":"function assumes parameters field selected contains true model parameters, non-zero values represent true effects zero values represent noise irrelevant effects.","code":""},{"path":[]},{"path":"http://jonathankoop.eu/remreg/reference/evaluate_selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Variable Selection Performance — evaluate_selection","text":"","code":"# Example selected variables from select_variables selected <- list(   mle = c(\"send_z1\", \"difference_z2\"),   abr_horseshoe = c(\"send_z1\"),   abr_ridge = c(\"send_z1\", \"difference_z2\", \"inertia\"),   abr_lasso = c(\"send_z1\"),   parameters = list(     send_z1 = 0.5,     difference_z2 = 0.2,     inertia = 0,     reciprocity = 0   ),   methods = c(\"mle\", \"abr_horseshoe\", \"abr_ridge\", \"abr_lasso\") )  # Evaluate selection performance performance <- evaluate_selection(selected) #> Selection Performance: #>    MLE: #>      TDR:  1  #>      FDR:  0  #>    ABR Horseshoe: #>      TDR:  0.5  #>      FDR:  0  #>    ABR Ridge: #>      TDR:  1  #>      FDR:  0.5  #>    ABR Lasso: #>      TDR:  0.5  #>      FDR:  0   # View results print(performance$tdr)  # True Discovery Rates #> $mle #> [1] 1 #>  #> $abr_horseshoe #> [1] 0.5 #>  #> $abr_ridge #> [1] 1 #>  #> $abr_lasso #> [1] 0.5 #>  print(performance$fdr)  # False Discovery Rates #> $mle #> [1] 0 #>  #> $abr_horseshoe #> [1] 0 #>  #> $abr_ridge #> [1] 0.5 #>  #> $abr_lasso #> [1] 0 #>"},{"path":"http://jonathankoop.eu/remreg/reference/generate_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Formula for tie_effects in remstats — generate_formula","title":"Generate a Formula for tie_effects in remstats — generate_formula","text":"function creates formula tie_effects argument remstats package based list parameters corresponding values. translates parameter names valid remstats effect terms combines formula.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/generate_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Formula for tie_effects in remstats — generate_formula","text":"","code":"generate_formula(parameters)"},{"path":"http://jonathankoop.eu/remreg/reference/generate_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Formula for tie_effects in remstats — generate_formula","text":"parameters named list parameters assigned values. Parameter names must follow specific naming convention recognized valid remstats effects. example, endogenous names inertia psABBA. Exogenous statistics need respective statistic name remstats::tie_effects(endogenous = FALSE) followed _[variable], e.g. send_z1. Unrecognized names ignored.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/generate_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Formula for tie_effects in remstats — generate_formula","text":"formula object class \"formula\", suitable tie_effects argument remstats::remstats function. formula specifies effects tie-oriented model statistics computed.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/generate_formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Formula for tie_effects in remstats — generate_formula","text":"generate_formula() function translates parameter names effect terms using specific prefixes direct matches. following naming conventions supported: Prefixes: Certain prefixes indicate exogenous effects: difference_: Generates difference('%s', scaling = 'std') term. same_: Generates ('%s') term. send_: Generates send('%s', scaling = 'std') term. receive_: Generates receive('%s', scaling = 'std') term. Additional prefixes like tie_, average_, minimum_, maximum_, event_ also supported. Specific Terms: Endogenous effects recognized directly names, : \"inertia\", \"indegreeSender\", \"reciprocity\", \"sp\", etc. names map respective terms remstats. Standardization: effects support scaling argument automatically standardized default (.e., scaling = 'std' applied). ensures effects computed consistently within model. parameter names match prefix specific term ignored. formula always includes intercept (1) default.","code":""},{"path":[]},{"path":"http://jonathankoop.eu/remreg/reference/generate_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Formula for tie_effects in remstats — generate_formula","text":"","code":"# Define parameters parameters <- list(   baseline = -5,   send_z1 = 0.5,   difference_z2 = 0.2,   inertia = 0.3,   receive_z1 = 0,   unknown_param = 1  # This will be ignored )  # Generate formula formula <- generate_formula(parameters) print(formula) #> ~1 + send(\"z1\", scaling = \"std\") + difference(\"z2\", scaling = \"std\") +  #>     inertia(scaling = \"std\") + receive(\"z1\", scaling = \"std\") #> <environment: 0x563f5937b6c0> # Output: # ~ 1 + send('z1', scaling = 'std') + #   difference('z2', scaling = 'std') + #   inertia(scaling = 'std') + #   receive('z1', scaling = 'std')  # Use the formula in remstats # remstats::remstats(reh, tie_effects = formula, attr_actors = covar)"},{"path":"http://jonathankoop.eu/remreg/reference/generate_reh.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Relational Event History (REH) — generate_reh","title":"Simulate a Relational Event History (REH) — generate_reh","text":"function simulates sequence relational events based specified statistical model derived relational event model (REM). uses covariates, list parameters, number events generate relational event history (REH) associated statistics.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/generate_reh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Relational Event History (REH) — generate_reh","text":"","code":"generate_reh(parameters, covar, M, directed = FALSE)"},{"path":"http://jonathankoop.eu/remreg/reference/generate_reh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Relational Event History (REH) — generate_reh","text":"parameters named list parameters model. parameter represents specific effect term tie-oriented model (e.g., send_z1, difference_z2, inertia). parameter names must align supported remreg::generate_formula(). covar data frame covariates containing least following columns: name: Numeric character identifiers actors. z1: numeric covariate representing attribute actors. z2: numeric covariate representing another attribute actors. time: starting time simulation (default usually 0). row represents actor network. M integer specifying number events simulate. directed logical value indicating whether network directed (TRUE) undirected (FALSE).","code":""},{"path":"http://jonathankoop.eu/remreg/reference/generate_reh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Relational Event History (REH) — generate_reh","text":"data frame representing simulated event history. data frame contains following columns: time: time event. actor1: identifier first actor involved event. actor2: identifier second actor involved event.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/generate_reh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a Relational Event History (REH) — generate_reh","text":"generate_reh() function simulates series relational events using specified model parameters covariates. simulation based relational event model (REM), statistical framework modeling analyzing dynamic interactions actors time. performs following steps: Formula Generation: function uses remreg::generate_formula() create formula tie_effects argument remstats::remstats(). Initialization: dummy first event created initialize simulation. Simulation Loop: event: model parameters applied compute event rates. new event sampled based computed rates. event added event history, model updated. Endogeneity Updates: function computes endogeneity statistics subsequent events using remstats::remstats(). Standardization: effects allow scaling standardized default (scaling = 'std'), ensuring consistent computation statistics.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/generate_reh.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulate a Relational Event History (REH) — generate_reh","text":"function inspired work presented article: Lakdawala, R., Mulder, J., & Leenders, R. (2024). Simulating Relational Event Histories–. arXiv preprint arXiv:2403.19329.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/generate_reh.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate a Relational Event History (REH) — generate_reh","text":"Lakdawala, R., Mulder, J., & Leenders, R. (2024). Simulating Relational Event Histories–. arXiv preprint arXiv:2403.19329.","code":""},{"path":[]},{"path":"http://jonathankoop.eu/remreg/reference/generate_reh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Relational Event History (REH) — generate_reh","text":"","code":"# Define parameters parameters <- list(   baseline = -5,   send_z1 = 0.5,   difference_z2 = 0.2,   inertia = 0.3 )  # Create covariate data covar <- data.frame(   name = 1:50, time = 0,   z1 = rnorm(n = 50, mean = 0, sd = 1),   z2 = rnorm(n = 50, mean = 0, sd = 1) )  # Simulate 10 events events <- generate_reh(parameters, covar, M = 10, directed = TRUE) #> 1  2  3  4  5  6  7  8  9  10  print(events$edgelist) #>          time actor1 actor2 #> 1  0.02037744      3     37 #> 2  0.02038913      3     37 #> 3  0.02041367      3     37 #> 4  0.02043817      3     37 #> 5  0.02048893      3     37 #> 6  0.02066064      3     37 #> 7  0.02070345      3     37 #> 8  0.02071180      3     37 #> 9  0.02076789      3     37 #> 10 0.02078205      3     37"},{"path":"http://jonathankoop.eu/remreg/reference/hdi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Highest Density Interval (HDI) — hdi","title":"Calculate the Highest Density Interval (HDI) — hdi","text":"Computes smallest interval containing specified probability mass given sample.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/hdi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Highest Density Interval (HDI) — hdi","text":"","code":"hdi(sample, prob = 0.95)"},{"path":"http://jonathankoop.eu/remreg/reference/hdi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Highest Density Interval (HDI) — hdi","text":"sample numeric vector representing sample data. prob numeric value 0 1 specifying desired probability mass. Defaults 0.95.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/hdi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Highest Density Interval (HDI) — hdi","text":"numeric vector length 2 indicating lower upper bounds HDI.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/remreg-package.html","id":null,"dir":"Reference","previous_headings":"","what":"remreg: Generate Relational Event History Data And Evaluate Variable Selection And Predictive Performance — remreg-package","title":"remreg: Generate Relational Event History Data And Evaluate Variable Selection And Predictive Performance — remreg-package","text":"package provides functions generate relational event history data evaluate variable selection approximate Bayesian regularization.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/select_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Significant Variables from REM Estimates — select_variables","title":"Select Significant Variables from REM Estimates — select_variables","text":"function selects variables meet specified significance criteria results Relational Event Models (REMs) estimated using estimate_rems(). supports significance selection Maximum Likelihood Estimation (MLE) Approximate Bayesian Regularization (ABR) methods various priors.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/select_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Significant Variables from REM Estimates — select_variables","text":"","code":"select_variables(   estimates,   criterion_mle = c(\"p<0.05\", \"p<0.01\", \"p<0.001\"),   criterion_abr = c(\"95% hdi\", \"99% hdi\", \"mean>0.1\", \"median>0.1\", \"mode>0.1\") )"},{"path":"http://jonathankoop.eu/remreg/reference/select_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Significant Variables from REM Estimates — select_variables","text":"estimates list output estimate_rems(), containing REM results, including: coefs_mle: Coefficients MLE (computed). coefs_abr_horseshoe: ABR results Horseshoe prior (computed). coefs_abr_ridge: ABR results Ridge prior (computed). coefs_abr_lasso: ABR results Lasso prior (computed). metadata parameters, covar, methods, directed, seed. criterion_mle character vector specifying criterion selecting variables MLE results. Options include: \"p<0.05\": Select variables p-values less 0.05. \"p<0.01\": Select variables p-values less 0.01. \"p<0.001\": Select variables p-values less 0.001. Must specify exactly one criterion. criterion_abr character vector specifying criterion selecting variables ABR results. Options include: \"95% hdi\": Select variables whose 95% highest density interval (HDI) include 0. \"99% hdi\": Select variables whose 99% HDI include 0. \"mean>0.1\": Select variables whose absolute shrunk mean exceeds 0.1. \"median>0.1\": Select variables whose absolute shrunk median exceeds 0.1. \"mode>0.1\": Select variables whose absolute shrunk mode exceeds 0.1. Must specify exactly one criterion.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/select_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Significant Variables from REM Estimates — select_variables","text":"list containing: mle: Variables selected MLE results (applicable). abr_horseshoe: Variables selected ABR results Horseshoe prior (applicable). abr_ridge: Variables selected ABR results Ridge prior (applicable). abr_lasso: Variables selected ABR results Lasso prior (applicable). Original metadata estimates input: parameters, covar, methods, directed, seed.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/select_variables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select Significant Variables from REM Estimates — select_variables","text":"function performs following steps: MLE Selection: Variables selected based p-values coefs_mle specified criterion (p<0.05, p<0.01, p<0.001). ABR Selection: ABR method (abr_horseshoe, abr_ridge, abr_lasso) input: HDI-based criteria (95% hdi, 99% hdi) select variables whose highest density interval include 0. Mean, median, mode-based criteria (mean>0.1, median>0.1, mode>0.1) select variables absolute values respective statistic exceeding 0.1. selected variables combined output list printed user review.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/select_variables.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Select Significant Variables from REM Estimates — select_variables","text":"one criterion can specified criterion_mle criterion_abr. multiple criteria provided either, function lead error.","code":""},{"path":[]},{"path":"http://jonathankoop.eu/remreg/reference/select_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Significant Variables from REM Estimates — select_variables","text":"","code":"# Example input from estimate_rems estimates <- estimate_rems(   edgelist = list(     edgelist = data.frame(time = 1:10,                           actor1 = sample(1:3, 10, replace = TRUE),                           actor2 = sample(1:3, 10, replace = TRUE)),     parameters = list(baseline = -5, send_z1 = 0.5, inertia = 0.3),     covar = data.frame(id = 1:3, z1 = rnorm(3)),     directed = TRUE   ),   methods = c(\"mle\", \"abr_horseshoe\") ) #> Warning:  #> Warning: self-loops are present in the input edgelist (i.e. `actor1` and `actor2` are the same). They are removed with the processing. #> Warning: use 'name' instead of 'id' in 'attr_actors' #> Relational Event Model (tie oriented)  #>  #> Call: #> ~1 + send(\"z1\", scaling = \"std\") + inertia(scaling = \"std\") #>  #>  #> Coefficients (MLE with interval likelihood): #>  #>          Estimate Std. Err  z value Pr(>|z|) Pr(=0) #> baseline -3.80030  1.90006 -2.00009   0.0455 0.2636 #> send_z1  -3.53230  2.84701 -1.24070   0.2147 0.5506 #> inertia  -0.74484  0.60798 -1.22510   0.2205 0.5554 #> Null deviance: 42.60303 on 7 degrees of freedom #> Residual deviance: 35.20138 on 4 degrees of freedom #> Chi-square: 7.401654 on 3 degrees of freedom, asymptotic p-value 0.06013995  #> AIC: 41.20138 AICC: 49.20138 BIC: 41.03911 #> MCMC burnin #> MCMC sampling #> Call: #> shrinkem.default(x = estimates, Sigma = cov, type = \"horseshoe\") #>  #>          input.est shrunk.mean shrunk.median shrunk.mode shrunk.lower #> baseline    -3.800      -1.603        -1.603      -1.401       -4.792 #> send_z1     -3.532      -0.306        -0.306       0.024       -4.994 #> inertia     -0.745      -0.269        -0.269      -0.004       -1.329 #>          shrunk.upper nonzero #> baseline        0.248       0 #> send_z1         2.583       0 #> inertia         0.545       0  # Select variables using p<0.05 for MLE and 95% HDI for ABR Horseshoe selected <- select_variables(estimates, criterion_mle = \"p<0.05\", criterion_abr = \"95% hdi\") #> Selected variables: #>  ABR Horseshoe:    # View selected variables print(selected$mle)                # Variables from MLE #> NULL print(selected$abr_horseshoe)      # Variables from ABR Horseshoe #> character(0)"},{"path":"http://jonathankoop.eu/remreg/reference/subset_edgelists.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Multiple Edgelists — subset_edgelists","title":"Subset Multiple Edgelists — subset_edgelists","text":"function subsets edgelist list edgelists include first m rows.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/subset_edgelists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Multiple Edgelists — subset_edgelists","text":"","code":"subset_edgelists(edgelists, m)"},{"path":"http://jonathankoop.eu/remreg/reference/subset_edgelists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Multiple Edgelists — subset_edgelists","text":"edgelists list edgelists. edgelist data frame least following columns: time: time event. actor1: identifier first actor involved event. actor2: identifier second actor involved event. m integer specifying number rows retain edgelist.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/subset_edgelists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Multiple Edgelists — subset_edgelists","text":"list edgelists, edgelist subset contain first m rows.","code":""},{"path":"http://jonathankoop.eu/remreg/reference/subset_edgelists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset Multiple Edgelists — subset_edgelists","text":"subset_edgelists() function useful processing multiple relational event histories (REHs) truncating specified number events. particularly helpful comparing analyzing event histories different lengths. function iterates edgelist input list subsets using standard R subsetting ([1:m, ]).","code":""},{"path":"http://jonathankoop.eu/remreg/reference/subset_edgelists.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Subset Multiple Edgelists — subset_edgelists","text":"function assumes edgelist input list data frame least columns time, actor1, actor2. edgelist contains fewer m rows, entire edgelist returned.","code":""},{"path":[]},{"path":"http://jonathankoop.eu/remreg/reference/subset_edgelists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset Multiple Edgelists — subset_edgelists","text":"","code":"# Example edgelists edgelists <- list(   data.frame(time = 1:10,              actor1 = sample(1:5, 10, replace = TRUE),              actor2 = sample(1:5, 10, replace = TRUE)),   data.frame(time = 1:15,              actor1 = sample(1:5, 15, replace = TRUE),              actor2 = sample(1:5, 15, replace = TRUE)) )  # Subset each edgelist to the first 5 rows subsetted <- subset_edgelists(edgelists, 5)  # View the subsetted edgelists print(subsetted[[1]]) #>   time actor1 actor2 #> 1    1      3      5 #> 2    2      2      5 #> 3    3      3      3 #> 4    4      3      1 #> 5    5      1      3 print(subsetted[[2]]) #>   time actor1 actor2 #> 1    1      5      5 #> 2    2      3      2 #> 3    3      1      1 #> 4    4      5      1 #> 5    5      2      2"}]
